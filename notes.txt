Python Advanced
===============

Toby Dussek
April 29-May 2 2024


You will need:
- Python 3.x
- an editor (e.g. VS Code, PyCharm etc.)
- internet, with permission to install python libraries (e.g. requests library)

Python code lives in classes (or in functions), in modules, which live in packages (folders)

9:30
11:00 break (15 mins)
12:30 lunch (1 hr)
3:00 break (15 minutes)
4:30 end

course website:
  https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Ericsson_Advanced_Python/site/index.html
course recordings
  username: neueda password: c0nygre 
Repo https://github.com/onionmccabbage/pythonAdvancedApril2024

Monday
> intro and welcome
  - what do you currently know
  - what do you want to know
> classes 
> abstract and concrete classes
> using slots
> validate data types: isinstance, type, int(float())
> inheritance
> name mangled members
> override the __eq__ method to define what you mean by equality
> if __name__== '__main__'
> why are we getting a space in printout after /n  - whitespace is being rendered as a space
> using decorators
> after lunch review
> functional programming: map, filter and reduce  
> functional programming: parameters

Tuesday
> Loading local and remote data (requests)
> typings
  https://www.reddit.com/r/Python/comments/lpovof/type_validation_decorator/?rdt=64125
> we will be using the 'requests' library for API calls
> processing text/json
  - json.loads() takes JSON and returns Python structure
  - json.dumps() takes Python structure and returns JSON
> persisting files: read/write/append/exclusive/overwrite, text, bytes, json
> 'with' operator for clean handling of assets
- how to convert bytes back to string b'this is bytes'.decode()
> databases
  see https://eteamspace.internal.ericsson.com/pages/viewpage.action?pageId=1122667126
  see https://wiki.python.org/moin/DatabaseProgramming
  also useful: add 'sqlite viewer' plugin to VSCode
> other db connections
> Create, Read and Update (and Delete) - CRUD operations
> populate db with sample data
> read and nicely format values from the db
> after lunch review exercise
> json.loads() and json.dumps()
> redirect stdout

Wednesday
> comprehensions, generators and yield
> decorator syntax
> context manager to switch context e.g. for handling data input and output
> networking server/client (microservices)
> overview of Flask
> immediate mode Python
  > any results are immediately show using __repr__ 
> Testing: (only really works if there is a good spec')
  > doctest revisited
  see https://docs.python.org/3/library/doctest.html
  > unittest
> after lunch lab exercise
> pytest see https://docs.pytest.org/

Thursday
- profiling: timings etc. (cprofile)
> multithreading, also limits of mutlithreading concurrency
  > how threads are done
  > concurrency and resources (lock shared resources)
  > async await - this is becoming standard
  > thread safety
  in Python we do not get true parallelism ...
> which Python... NB 3.13 contains an optional GIL (cpython)
> the global Interpreter Lock (GIL) will affect threading performance
  the classic cpython will be stymied by the GIL
  jython (implements python 2) (Java) an ironpython (.NET) are NOT limited in this way
  ipython is interactive python (often seen in Jupyter etc.)
> using thread locks
> Python has -O to optimize code (especially useful for threading and large code-base)
  -O will attempt to optimize the code especially good for threading
> logging, context mgr, often we log by time-stamp
> after lunch review
> async server and client for microservices
- zip, deque, iter etc

From the chat:
GIL going optional gh-116167: Allow disabling the GIL with `PYTHON_GIL=0` or `-X gil=0` by swtaarrs · Pull Request #116338 · python/cpython · GitHub
gh-116167: Allow disabling the GIL with `PYTHON_GIL=0` or `-X gil=0` by swtaarrs · Pull Request #116338 · python/cpython
In free-threaded builds, running with PYTHON_GIL=0 or -X gil=0 will now disable the GIL. #116322 and #116329 track follow-up work to re-enable the GIL when loading an incompatible extension, and to...
The documentation/code for CWE-833 is online:
secure_coding_one_stop_shop_for_python/CWE-664/CWE-833 at main · Ericsson/secure_coding_one_stop_shop_for_python · GitHub
On threads we have a good introduction on this topic in the "Python secure coding one stop shop" including  deadlock examples. Main page:
Introduction to Multithreading and Multiprocessing in Python - Development Environment - eTeamSpace (ericsson.com)
Deadlock specific subpage :
CWE-833: Deadlock - Development Environment - eTeamSpace (ericsson.com) 
secure_coding_one_stop_shop_for_python/CWE-664/CWE-833 at main · Ericsson/secure_coding_one_stop_shop_for_python
Secure Coding in Python. Contribute to Ericsson/secure_coding_one_stop_shop_for_python development by creating an account on GitHub.



- end of course feedbacks (internal and Neueda)
  https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LZU1500681&OID=513177&Title=Advanced%20Python&Owner=Sachin%20Srivastava%20B

Other Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3 https://docs.python.org/3/howto/pyporting.html